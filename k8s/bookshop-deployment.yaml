apiVersion: apps/v1
kind: Deployment
metadata:
  name: bookshop-deployment
  namespace: bookshop
spec:
  replicas: 1
  selector:
    matchLabels:
      app: bookshop
  template:
    metadata:
      labels:
        app: bookshop
        version: diploma
    spec:
      containers:
      - name: bookshop
        image: python:3.11-slim
        ports:
        - containerPort: 8000
        command: ["/bin/bash"]
        args: ["-c", "pip install flask requests flask-cors && python -c \"
from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import json
from datetime import datetime

app = Flask(__name__)
CORS(app)

books = [
    {'id': 1, 'title': '–ß–∏—Å—Ç—ã–π –∫–æ–¥', 'author': '–†–æ–±–µ—Ä—Ç –ú–∞—Ä—Ç–∏–Ω', 'price': 1500},
    {'id': 2, 'title': '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ü–û', 'author': '–ú–∞—Ä—Ç–∏–Ω –§–∞—É–ª–µ—Ä', 'price': 2000},
    {'id': 3, 'title': 'Python –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤', 'author': '–î—ç–Ω –ë–µ–π–¥–µ—Ä', 'price': 1800}
]

orders = []
cart = []

API_STORE_URL = 'http://api-store-service.api-store.svc.cluster.local'

@app.route('/')
def home():
    return jsonify({
        'service': 'Bookshop',
        'status': 'running',
        'books_count': len(books),
        'orders_count': len(orders),
        'cart_items': len(cart),
        'endpoints': {
            'GET /api/books': '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏',
            'POST /api/cart/add': '–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É –≤ –∫–æ—Ä–∑–∏–Ω—É',
            'GET /api/cart': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
            'POST /api/orders': '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑',
            'GET /api/orders': '–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã'
        }
    })

@app.route('/api/books', methods=['GET'])
def get_books():
    return jsonify(books)

@app.route('/api/cart', methods=['GET'])
def get_cart():
    total = sum(item['price'] * item['quantity'] for item in cart)
    return jsonify({'items': cart, 'total': total, 'count': len(cart)})

@app.route('/api/cart/add', methods=['POST'])
def add_to_cart():
    try:
        data = request.get_json()
        book_id = data.get('book_id')
        quantity = data.get('quantity', 1)
        
        book = next((b for b in books if b['id'] == book_id), None)
        if not book:
            return jsonify({'error': '–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
        
        cart_item = {
            'book_id': book_id,
            'title': book['title'],
            'author': book['author'],
            'price': book['price'],
            'quantity': quantity
        }
        cart.append(cart_item)
        
        return jsonify({'message': '–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É', 'item': cart_item}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/orders', methods=['GET'])
def get_orders():
    return jsonify(orders)

@app.route('/api/orders', methods=['POST'])
def create_order():
    try:
        if not cart:
            return jsonify({'error': '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'}), 400
        
        order_id = len(orders) + 1
        order = {
            'id': order_id,
            'items': cart.copy(),
            'total': sum(item['price'] * item['quantity'] for item in cart),
            'created_at': datetime.now().isoformat(),
            'status': 'created'
        }
        orders.append(order)
        
        purchase_data = []
        for item in cart:
            purchase_data.append({
                'order_id': order_id,
                'book_id': item['book_id'],
                'user_id': 1,
                'book_title': item['title'],
                'author_name': item['author'],
                'price': item['price'] * item['quantity'],
                'create_at': datetime.now().strftime('%Y-%m-%d'),
                'publisher_id': 1
            })
        
        try:
            print(f'üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ {order_id} –≤ API Store...')
            response = requests.post(f'{API_STORE_URL}/purchases', json=purchase_data, timeout=10)
            if response.status_code == 200:
                print(f'‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ API Store')
                order['api_store_status'] = 'sent'
            else:
                print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API Store: {response.status_code}')
                order['api_store_status'] = 'failed'
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Store: {e}')
            order['api_store_status'] = 'connection_error'
        
        cart.clear()
        print(f'üéâ –ó–∞–∫–∞–∑ {order_id} —Å–æ–∑–¥–∞–Ω! –°—É–º–º–∞: {order[\"total\"]} —Ä—É–±.')
        return jsonify(order), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health():
    return jsonify({'status': 'healthy'})

if __name__ == '__main__':
    print('üöÄ Bookshop –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000')
    app.run(host='0.0.0.0', port=8000, debug=False)
\""]
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 15
