apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-store-deployment
  namespace: api-store
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-store
  template:
    metadata:
      labels:
        app: api-store
        version: diploma
    spec:
      containers:
      - name: api-store
        image: python:3.11-slim
        ports:
        - containerPort: 5050
        command: ["/bin/bash"]
        args: ["-c", "pip install flask flask-cors && python -c \"
from flask import Flask, request, jsonify
from flask_cors import CORS
import json
from datetime import datetime

app = Flask(__name__)
CORS(app)
purchases = []

@app.route('/')
def home():
    return jsonify({
        'service': 'API Store',
        'status': 'running',
        'purchases_count': len(purchases),
        'endpoints': {
            'GET /purchases': '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ–∫—É–ø–∫–∏',
            'POST /purchases': '–°–æ–∑–¥–∞—Ç—å –ø–æ–∫—É–ø–∫–∏'
        }
    })

@app.route('/purchases', methods=['GET'])
def get_purchases():
    return jsonify(purchases)

@app.route('/purchases', methods=['POST'])
def create_purchases():
    try:
        data = request.get_json()
        if not isinstance(data, list):
            return jsonify({'error': 'Expected list of purchases'}), 400
        for purchase in data:
            purchase['id'] = len(purchases) + 1
            purchase['created_at'] = datetime.now().isoformat()
            purchases.append(purchase)
        print(f'üì¶ –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑: {len(data)} –ø–æ–∫—É–ø–æ–∫')
        return jsonify(data), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/health')
def health():
    return jsonify({'status': 'healthy'})

if __name__ == '__main__':
    print('üöÄ API Store –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5050')
    app.run(host='0.0.0.0', port=5050, debug=False)
\""]
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5050
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 5050
          initialDelaySeconds: 60
          periodSeconds: 15
