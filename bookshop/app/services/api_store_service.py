import requests
from flask import current_app
from datetime import datetime

class ApiStoreService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API Store"""
    
    def __init__(self):
        self.api_store_url = current_app.config.get('API_STORE_URL')
        self.timeout = 10
    
    def send_order(self, order):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ API Store"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API Store
            purchase_data = []
            for item in order.items:
                purchase_data.append({
                    'order_id': order.id,
                    'book_id': item.book_id,
                    'user_id': order.user_id,
                    'book_title': item.book.title,
                    'author_name': item.book.author.name,
                    'price': float(item.price_at_time) * item.quantity,
                    'create_at': datetime.now().strftime('%Y-%m-%d'),
                    'publisher_id': 1  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è publisher_id
                })
            
            print(f'üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ {order.order_number} –≤ API Store: {self.api_store_url}')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                f'{self.api_store_url}/purchases/',
                json=purchase_data,
                timeout=self.timeout,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code in [200, 201]:
                print(f'‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ API Store')
                return {
                    'status': 'sent',
                    'response': response.json(),
                    'http_status': response.status_code
                }
            else:
                print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API Store: HTTP {response.status_code}')
                return {
                    'status': 'failed',
                    'error': f'HTTP {response.status_code}',
                    'response_text': response.text[:500]  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
                }
                
        except requests.exceptions.Timeout:
            print(f'‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ API Store')
            return {
                'status': 'timeout',
                'error': 'Request timeout'
            }
        except requests.exceptions.ConnectionError:
            print(f'üîå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Store')
            return {
                'status': 'connection_error',
                'error': 'Connection error'
            }
        except Exception as e:
            print(f'‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ API Store: {e}')
            return {
                'status': 'error',
                'error': str(e)
            }
    
    def check_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API Store"""
        try:
            response = requests.get(f'{self.api_store_url}/', timeout=5)
            return response.status_code == 200
        except:
            return False 