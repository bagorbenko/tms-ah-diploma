name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - prod

env:
  REGISTRY: europe-west1-docker.pkg.dev
  PROJECT_ID: sinuous-vent-463114-h1
  REPOSITORY: diploma-docker-repo

jobs:
  # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
  init:
    name: üöÄ Initialize Pipeline
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      image-tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=qa" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi
          
      - name: Set image tag
        id: set-tag
        run: |
          echo "tag=sha-$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT

  # 2. –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
  build:
    name: üî® Build Applications
    runs-on: ubuntu-latest
    needs: init
    strategy:
      matrix:
        service: [api-store, bookshop]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Create Artifact Registry repository
        run: |
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=europe-west1 \
            --description="Docker repository for diploma project" || true
            
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet
        
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ needs.init.outputs.image-tag }}
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  test:
    name: üß™ Test Suite
    runs-on: ubuntu-latest
    needs: init
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies and test api-store
        working-directory: api-store
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASS: test_pass
        run: |
          pip install -r requirements.txt
          pytest --cov=app --cov-report=xml --junitxml=test-results.xml || true
          
      - name: Install dependencies and test bookshop
        working-directory: bookshop
        env:
          DATABASE_URL: "sqlite:///:memory:"
          TESTING: "true"
        run: |
          pip install -r requirements.txt
          pytest --cov=. --cov-report=xml --junitxml=test-results.xml || true
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            */test-results.xml
            */coverage.xml

  # 4. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  code-quality:
    name: üìä Code Quality Analysis
    runs-on: ubuntu-latest
    needs: test
    if: false  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          
      - name: Quality Gate Check
        run: |
          echo "Checking quality gate status..."
          # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ SonarCloud API

  # 5. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (DevSecOps)
  security:
    name: üîí Security Scanning
    runs-on: ubuntu-latest
    needs: build
    if: false  # –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    strategy:
      matrix:
        service: [api-store, bookshop]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --project-name=${{ matrix.service }} --file=${{ matrix.service }}/requirements.txt
          
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:8000'
          
      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results-${{ matrix.service }}
          path: |
            snyk-results.json
            zap-results.json

  # 6. –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∫ –∫–æ–¥
  infrastructure:
    name: üèóÔ∏è Infrastructure as Code
    runs-on: ubuntu-latest
    needs: [init]
    if: needs.init.outputs.environment != 'dev'
    environment: ${{ needs.init.outputs.environment }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=${{ needs.init.outputs.environment }}/terraform/state"
            
      - name: Terraform Plan
        run: |
          terraform plan \
            -var="environment=${{ needs.init.outputs.environment }}" \
            -var="cluster_name=diploma-cluster" \
            -out=tfplan
            
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        run: |
          # First try normal apply
          if ! terraform apply -auto-approve tfplan; then
            echo "‚ùå Normal apply failed, checking if resources already exist..."
            
            # Check if it's a resource already exists error
            if [[ $? -eq 1 ]]; then
              echo "üîÑ Attempting to import existing resources..."
              
              # Try to import existing resources based on environment
              ENV="${{ needs.init.outputs.environment }}"
              PROJECT_ID="${{ env.PROJECT_ID }}"
              
              echo "Importing existing cluster and node pool for environment: $ENV"
              terraform import -var="environment=$ENV" google_container_cluster.diploma_cluster "projects/$PROJECT_ID/locations/europe-west1-b/clusters/diploma-cluster-$ENV" || true
              terraform import -var="environment=$ENV" google_container_node_pool.primary_nodes "projects/$PROJECT_ID/locations/europe-west1-b/clusters/diploma-cluster-$ENV/nodePools/diploma-cluster-nodes-$ENV" || true
              
              # Re-plan and apply
              echo "üîß Re-planning after import..."
              terraform plan -var="environment=$ENV" -var="cluster_name=diploma-cluster" -out=tfplan
              
              if terraform show -no-color tfplan | grep -q "No changes"; then
                echo "‚úÖ All resources now in sync, no changes needed"
              else
                echo "üöÄ Applying remaining changes..."
                terraform apply -auto-approve tfplan
              fi
            else
              echo "‚ùå Apply failed with unexpected error"
              exit 1
            fi
          else
            echo "‚úÖ Infrastructure applied successfully!"
          fi

  # 7. –î–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
  deploy:
    name: üöÄ Deploy Applications  
    runs-on: ubuntu-latest
    needs: [init, build, infrastructure]
    environment: ${{ needs.init.outputs.environment }}
    strategy:
      matrix:
        service: [api-store, bookshop]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: diploma-cluster-${{ needs.init.outputs.environment }}
          location: europe-west1-b
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Deploy to Kubernetes
        run: |
          # Update image tag in deployment
          sed -i "s|image: gcr.io.*|image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service }}:${{ needs.init.outputs.image-tag }}|g" k8s/${{ matrix.service }}-deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/${{ matrix.service }}-deployment.yaml -n ${{ matrix.service }}-${{ needs.init.outputs.environment }}
          kubectl apply -f k8s/${{ matrix.service }}-service.yaml -n ${{ matrix.service }}-${{ needs.init.outputs.environment }}
          
          # Wait for rollout
          kubectl rollout status deployment/${{ matrix.service }}-deployment -n ${{ matrix.service }}-${{ needs.init.outputs.environment }}

  # 8. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DuckDNS –∏ TLS
  duckdns-tls-setup:
    name: üîê DuckDNS & TLS Setup
    runs-on: ubuntu-latest
    needs: [init, deploy]
    if: needs.init.outputs.environment == 'prod'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: diploma-cluster-${{ needs.init.outputs.environment }}
          location: europe-west1-b
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Setup DuckDNS domains
        env:
          DUCKDNS_TOKEN: ${{ secrets.DUCKDNS_TOKEN }}
          DUCKDNS_DOMAIN: ${{ secrets.DUCKDNS_DOMAIN || 'diploma-project' }}
          ENVIRONMENT: ${{ needs.init.outputs.environment }}
        run: |
          # Make script executable
          chmod +x scripts/setup-duckdns.sh
          
          # Run DuckDNS setup
          ./scripts/setup-duckdns.sh
          
      - name: Wait for DNS propagation
        run: |
          echo "Waiting for DNS propagation..."
          sleep 60
          
      - name: Setup cert-manager
        run: |
          kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml
          
          # Wait for cert-manager to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=cert-manager -n cert-manager --timeout=300s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=cainjector -n cert-manager --timeout=300s
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=webhook -n cert-manager --timeout=300s
          
      - name: Configure TLS certificates
        run: |
          kubectl apply -f k8s/tls-certificates.yaml
          
      - name: Verify SSL certificates
        run: |
          echo "Waiting for certificate issuance..."
          sleep 120
          
          # Check certificate status
          kubectl get certificates -A
          kubectl describe certificates -A

  # 9. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
  monitoring:
    name: üìä Setup Monitoring
    runs-on: ubuntu-latest
    needs: [init, deploy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy Grafana
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm upgrade --install grafana grafana/grafana \
            --namespace monitoring-${{ needs.init.outputs.environment }} \
            --create-namespace \
            --values monitoring/grafana-values.yaml

  # 10. –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  load-testing:
    name: üèãÔ∏è Load Testing
    runs-on: ubuntu-latest
    needs: [init, deploy]
    if: needs.init.outputs.environment != 'dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Run load tests
        run: |
          k6 run tests/load-test.js
          
      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: load-test-results.json

  # 11. –î–µ–ø–ª–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  static-deploy:
    name: üåê Deploy Static Content
    runs-on: ubuntu-latest
    needs: [init, deploy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Upload to Cloud Storage
        run: |
          gsutil cp index.html gs://diploma-static-${{ needs.init.outputs.environment }}/
          gsutil web set -m index.html gs://diploma-static-${{ needs.init.outputs.environment }}/

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
  notify:
    name: üìß Notify Results
    runs-on: ubuntu-latest
    needs: [init, deploy, load-testing, static-deploy]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          echo "üéâ Deployment to ${{ needs.init.outputs.environment }} completed successfully!"
          
      - name: Notify on failure
        if: ${{ needs.deploy.result == 'failure' }}
        run: |
          echo "‚ùå Deployment to ${{ needs.init.outputs.environment }} failed!" 