name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-test:
    runs-on: ubuntu-latest

    env:
      DB_API_HOST:     ${{ secrets.DB_API_HOST }}
      DB_API_PORT:     ${{ secrets.DB_API_PORT }}
      DB_API_NAME:     ${{ secrets.DB_API_NAME }}
      DB_API_USER:     ${{ secrets.DB_API_USER }}
      DB_API_PASSWORD: ${{ secrets.DB_API_PASSWORD }}
      DB_BOOKSHOP_HOST:     ${{ secrets.DB_BOOKSHOP_HOST }}
      DB_BOOKSHOP_PORT:     ${{ secrets.DB_BOOKSHOP_PORT }}
      DB_BOOKSHOP_NAME:     ${{ secrets.DB_BOOKSHOP_NAME }}
      DB_BOOKSHOP_USER:     ${{ secrets.DB_BOOKSHOP_USER }}
      DB_BOOKSHOP_PASSWORD: ${{ secrets.DB_BOOKSHOP_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install & test api-store
        working-directory: api-store
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest

      - name: Install & test bookshop
        working-directory: bookshop
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest



  terraform:
    needs: lint-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform/state"
      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -input=false tfplan

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup GCloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER }}
          location: ${{ secrets.GKE_ZONE }}
      - name: Create namespaces
        run: |
          kubectl create namespace api-store --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace bookshop  --dry-run=client -o yaml | kubectl apply -f -
      - name: Create API-store secret
        run: |
          kubectl create secret generic api-store-secret \
            --namespace api-store \
            --from-literal=DB_HOST=${{ secrets.DB_API_HOST }} \
            --from-literal=DB_PORT=${{ secrets.DB_API_PORT }} \
            --from-literal=DB_NAME=${{ secrets.DB_API_NAME }} \
            --from-literal=DB_USER=${{ secrets.DB_API_USER }} \
            --from-literal=DB_PASSWORD=${{ secrets.DB_API_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -
      - name: Deploy API-store
        run: |
          kubectl apply -f k8s/api-store-deployment.yaml
          kubectl apply -f k8s/api-store-service.yaml
      - name: Create Bookshop secret
        run: |
          kubectl create secret generic bookshop-secret \
            --namespace bookshop \
            --from-literal=DATABASE_URL="postgres://${{ secrets.DB_BOOKSHOP_USER }}:${{ secrets.DB_BOOKSHOP_PASSWORD }}@${{ secrets.DB_BOOKSHOP_HOST }}:${{ secrets.DB_BOOKSHOP_PORT }}/${{ secrets.DB_BOOKSHOP_NAME }}" \
            --dry-run=client -o yaml | kubectl apply -f -
      - name: Deploy Bookshop
        run: |
          kubectl apply -f k8s/bookshop-deployment.yaml
          kubectl apply -f k8s/bookshop-service.yaml