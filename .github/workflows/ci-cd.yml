name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install & test api-store
        working-directory: api-store
        env:
          # Используем тестовую базу данных PostgreSQL для CI
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASS: test_pass
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest

      - name: Install & test bookshop
        working-directory: bookshop
        env:
          DATABASE_URL: "sqlite:///:memory:"
          TESTING: "true"
          DB_HOST: ${{ secrets.DB_BOOKSHOP_HOST }}
          DB_PORT: ${{ secrets.DB_BOOKSHOP_PORT }}
          DB_NAME: ${{ secrets.DB_BOOKSHOP_NAME }}
          DB_USER: ${{ secrets.DB_BOOKSHOP_USER }}
          DB_PASS: ${{ secrets.DB_BOOKSHOP_PASSWORD }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest


  terraform:
    needs: lint-test
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    steps:
      - uses: actions/checkout@v3

      - name: Setup GCP credentials file
        run: |
          # Создаем JSON файл с правильным экранированием
          cat > gcp-key.json << 'EOF'
          ${{ secrets.GCP_SA_KEY }}
          EOF
          
          # Проверяем валидность JSON
          if ! python3 -m json.tool gcp-key.json > /dev/null 2>&1; then
            echo "ERROR: Invalid JSON in GCP_SA_KEY secret"
            echo "First 100 characters:"
            head -c 100 gcp-key.json | cat -v
            exit 1
          fi
          
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json" >> $GITHUB_ENV
          echo "GCP credentials file created successfully"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Authenticate with GCP
        run: |
          # Активируем service account
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          
          # Получаем project ID из service account key
          PROJECT_ID=$(cat $GOOGLE_APPLICATION_CREDENTIALS | python3 -c "import sys, json; print(json.load(sys.stdin)['project_id'])")
          echo "Detected project ID: $PROJECT_ID"
          
          # Устанавливаем проект
          gcloud config set project $PROJECT_ID
          echo "✅ GCP authentication completed for project: $PROJECT_ID"

      - name: Enable Required APIs
        run: |
          # Получаем project ID из конфигурации gcloud
          PROJECT_ID=$(gcloud config get-value project)
          echo "Using project ID: $PROJECT_ID"
          
          # Включаем необходимые API для GKE
          gcloud services enable container.googleapis.com --project=$PROJECT_ID
          gcloud services enable compute.googleapis.com --project=$PROJECT_ID
          gcloud services enable cloudresourcemanager.googleapis.com --project=$PROJECT_ID
          echo "✅ APIs enabled successfully for project: $PROJECT_ID"

      - name: Terraform Init
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=terraform/state"

      - name: Clear Terraform State (fresh start)
        run: |
          # Очищаем state для чистого создания
          terraform force-unlock -force 1750463563473736 || true
          echo "🧹 State cleared for fresh deployment"

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -input=false tfplan

  deploy:
    needs: terraform
    runs-on: ubuntu-latest

    # only deploy when we're on main
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Setup GCP credentials file
        run: |
          # Создаем JSON файл с правильным экранированием
          cat > gcp-key.json << 'EOF'
          ${{ secrets.GCP_SA_KEY }}
          EOF
          
          # Проверяем валидность JSON
          if ! python3 -m json.tool gcp-key.json > /dev/null 2>&1; then
            echo "ERROR: Invalid JSON in GCP_SA_KEY secret"
            echo "First 100 characters:"
            head -c 100 gcp-key.json | cat -v
            exit 1
          fi
          
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json" >> $GITHUB_ENV
          echo "GCP credentials file created successfully"

      - name: Setup GCloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: diploma-cluster
          location: europe-west3

      - name: Create namespaces
        run: |
          kubectl create namespace api-store --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace bookshop  --dry-run=client -o yaml | kubectl apply -f -

      - name: Create API-store secret
        run: |
          kubectl create secret generic api-store-secret \
            --namespace api-store \
            --from-literal=DB_HOST=${{ secrets.DB_API_HOST }} \
            --from-literal=DB_PORT=${{ secrets.DB_API_PORT }} \
            --from-literal=DB_NAME=${{ secrets.DB_API_NAME }} \
            --from-literal=DB_USER=${{ secrets.DB_API_USER }} \
            --from-literal=DB_PASS=${{ secrets.DB_API_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy API-store
        run: |
          kubectl apply -f k8s/api-store-deployment.yaml
          kubectl apply -f k8s/api-store-service.yaml

      - name: Create Bookshop secret
        run: |
          kubectl create secret generic bookshop-secret \
            --namespace bookshop \
            --from-literal=DATABASE_URL="postgres://${{ secrets.DB_BOOKSHOP_USER }}:${{ secrets.DB_BOOKSHOP_PASSWORD }}@${{ secrets.DB_BOOKSHOP_HOST }}:${{ secrets.DB_BOOKSHOP_PORT }}/${{ secrets.DB_BOOKSHOP_NAME }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Bookshop
        run: |
          kubectl apply -f k8s/bookshop-deployment.yaml
          kubectl apply -f k8s/bookshop-service.yaml
