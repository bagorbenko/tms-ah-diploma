name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install & test api-store
        working-directory: api-store
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASS: test_pass
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest

      - name: Install & test bookshop
        working-directory: bookshop
        env:
          DATABASE_URL: "sqlite:///:memory:"
          TESTING: "true"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pytest

  terraform:
    needs: lint-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    defaults:
      run:
        working-directory: terraform

    steps:
      - uses: actions/checkout@v3

      - name: Setup GCP credentials
        run: |
          cat > gcp-key.json << 'EOF'
          ${{ secrets.GCP_SA_KEY }}
          EOF
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Authenticate with GCP
        run: |
          gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          PROJECT_ID=$(cat $GOOGLE_APPLICATION_CREDENTIALS | python3 -c "import sys, json; print(json.load(sys.stdin)['project_id'])")
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          gcloud config set project $PROJECT_ID

      - name: Terraform Init
        run: |
          terraform init -input=false \
            -backend-config="bucket=tms-ah-diploma-terraform-state-1750537145" \
            -backend-config="prefix=terraform/state"

      - name: Check existing infrastructure
        run: |
          echo "Checking existing GKE resources..."
          gcloud container clusters list --format="table(name,location,status)"
          gcloud container node-pools list --cluster=diploma-cluster-dev --location=europe-west1-b --format="table(name,status,nodeCount)" || echo "No node pools found"

      - name: Terraform Plan
        run: |
          # Always create a plan to detect changes
          terraform plan -input=false -out=tfplan
          
          # Check if there are changes
          if terraform show -no-color tfplan | grep -q "No changes"; then
            echo "‚úÖ No infrastructure changes needed"
          else
            echo "üìã Infrastructure changes detected, will apply in next step"
          fi

      - name: Terraform Apply
        run: |
          # Check if there are changes to apply
          if terraform show -no-color tfplan | grep -q "No changes"; then
            echo "‚úÖ No infrastructure changes needed, skipping apply"
          else
            echo "Applying infrastructure changes..."
            
            # First try normal apply
            if ! terraform apply -input=false -auto-approve tfplan; then
              echo "‚ùå Normal apply failed, checking if resources already exist..."
              
              # Check if it's a resource already exists error
              if [[ $? -eq 1 ]]; then
                echo "üîÑ Attempting to import existing resources..."
                
                                 # Try to import existing resources
                 echo "Importing existing cluster and node pool..."
                 # Import dev resources
                 terraform import google_container_cluster.diploma_cluster projects/$PROJECT_ID/locations/europe-west1-b/clusters/diploma-cluster-dev || true
                 terraform import google_container_node_pool.primary_nodes projects/$PROJECT_ID/locations/europe-west1-b/clusters/diploma-cluster-dev/nodePools/diploma-cluster-nodes-dev || true
                 
                 # Also try to import prod resources if they exist
                 terraform import -var="environment=prod" google_container_cluster.diploma_cluster projects/$PROJECT_ID/locations/europe-west1-b/clusters/diploma-cluster-prod || true
                 terraform import -var="environment=prod" google_container_node_pool.primary_nodes projects/$PROJECT_ID/locations/europe-west1-b/clusters/diploma-cluster-prod/nodePools/diploma-cluster-nodes-prod || true
                
                # Re-plan and apply
                echo "üîß Re-planning after import..."
                terraform plan -input=false -out=tfplan
                
                if terraform show -no-color tfplan | grep -q "No changes"; then
                  echo "‚úÖ All resources now in sync, no changes needed"
                else
                  echo "üöÄ Applying remaining changes..."
                  terraform apply -input=false -auto-approve tfplan
                fi
              else
                echo "‚ùå Apply failed with unexpected error"
                exit 1
              fi
            else
              echo "‚úÖ Infrastructure applied successfully!"
            fi
          fi

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v3

      - name: Setup GCP credentials
        run: |
          cat > gcp-key.json << 'EOF'
          ${{ secrets.GCP_SA_KEY }}
          EOF
          PROJECT_ID=$(cat gcp-key.json | python3 -c "import sys, json; print(json.load(sys.stdin)['project_id'])")
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-key.json" >> $GITHUB_ENV

      - name: Setup GCloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: diploma-cluster-dev
          location: europe-west1-b
          project_id: ${{ env.PROJECT_ID }}

      - name: Deploy applications
        run: |
          # –°–æ–∑–¥–∞–µ–º namespaces
          kubectl create namespace api-store --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace bookshop --dry-run=client -o yaml | kubectl apply -f -

          # –°–æ–∑–¥–∞–µ–º secrets
          kubectl create secret generic api-store-secret \
            --namespace api-store \
            --from-literal=DB_HOST=${{ secrets.DB_API_HOST }} \
            --from-literal=DB_PORT=${{ secrets.DB_API_PORT }} \
            --from-literal=DB_NAME=${{ secrets.DB_API_NAME }} \
            --from-literal=DB_USER=${{ secrets.DB_API_USER }} \
            --from-literal=DB_PASS=${{ secrets.DB_API_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

          kubectl create secret generic bookshop-secret \
            --namespace bookshop \
            --from-literal=DATABASE_URL="postgres://${{ secrets.DB_BOOKSHOP_USER }}:${{ secrets.DB_BOOKSHOP_PASSWORD }}@${{ secrets.DB_BOOKSHOP_HOST }}:${{ secrets.DB_BOOKSHOP_PORT }}/${{ secrets.DB_BOOKSHOP_NAME }}" \
            --dry-run=client -o yaml | kubectl apply -f -

          # –î–µ–ø–ª–æ–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          kubectl apply -f k8s/api-store-deployment.yaml
          kubectl apply -f k8s/api-store-service.yaml
          kubectl apply -f k8s/bookshop-deployment.yaml
          kubectl apply -f k8s/bookshop-service.yaml

          echo "‚úÖ Applications deployed successfully!"
